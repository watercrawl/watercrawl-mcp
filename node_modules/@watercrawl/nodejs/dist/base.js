import axios from 'axios';
import urlJoin from 'url-join';
export class BaseAPIClient {
    constructor(apiKey, baseUrl = 'https://app.watercrawl.dev') {
        this.apiKey = apiKey;
        this.baseUrl = baseUrl;
        this.client = axios.create({
            baseURL: this.baseUrl,
            headers: {
                'X-API-KEY': `${apiKey}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });
        this.client.interceptors.response.use(response => response, error => {
            if (error.response) {
                console.error('API Error:', {
                    url: error.config.url,
                    status: error.response.status,
                    data: error.response.data,
                    headers: error.response.headers
                });
            }
            throw error;
        });
    }
    async get(path, params = {}) {
        const response = await this.client.get(path, { params });
        return response.data;
    }
    async post(path, data = {}) {
        const response = await this.client.post(path, data);
        return response.data;
    }
    async put(path, data = {}) {
        const response = await this.client.put(path, data);
        return response.data;
    }
    async delete(path) {
        const response = await this.client.delete(path);
        return response.data;
    }
    async patch(path, data = {}) {
        const response = await this.client.patch(path, data);
        return response.data;
    }
    buildUrl(...parts) {
        return urlJoin(this.baseUrl, ...parts);
    }
    /**
     * Async generator that streams SSE data using fetch and yields parsed JSON
     */
    async *fetchStream(endpoint, config = {}) {
        const url = new URL(this.buildUrl(endpoint));
        if (config.params) {
            Object.keys(config.params).forEach(key => {
                url.searchParams.append(key, config.params[key]);
            });
        }
        const response = await fetch(url.toString(), {
            method: 'GET',
            headers: {
                // 'Accept': 'text/event-stream',
                'X-API-KEY': this.apiKey
            }
        });
        if (!response.body) {
            throw new Error("No response body");
        }
        const reader = response.body.getReader();
        const decoder = new TextDecoder("utf-8");
        let buffer = '';
        while (true) {
            const { done, value } = await reader.read();
            if (done)
                break;
            buffer += decoder.decode(value, { stream: true });
            const lines = buffer.split('\n');
            buffer = lines.pop() || '';
            for (const line of lines) {
                const trimmed = line.trim();
                if (trimmed.startsWith('data:')) {
                    const dataStr = trimmed.slice(5).trim();
                    if (dataStr === '[DONE]')
                        return;
                    try {
                        yield JSON.parse(dataStr);
                    }
                    catch (err) {
                        console.error('Failed to parse JSON from stream:', dataStr, err);
                    }
                }
            }
        }
    }
}
